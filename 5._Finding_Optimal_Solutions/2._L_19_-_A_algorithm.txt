Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-20T08:10:28+05:30

====== 2. L 19 - A algorithm ======
Created Tuesday 20 October 2020

'*' means admissible - i.e correct.
**Recap**
Best First search used a heuristic function and chooses the best.
* Best first search tries to stay near the goal
* B&B tries to stay near the goal
* A algorithm combines these two tendencies.
--------------------
**Jargon**
g(n) - the **current actual** cost from S to n. This may change.
h(n) - **estimated** cost from n to G, i.e the remaining path cost. It is an independent property of each node. It is fixed.
g*(n) - **optimal** cost from S to n
h*(n) - **optimal** cost from n to G

f(n) = estimated cost from S to G, going through n. = g(n) + h(n)

--------------------
A* is admissible only if **underestimation** is taking place.
i.e h(n)<=h*(n)
This is because we cannot have perfect estimates, and also that overestimation will stop the search prematurely. Underestimation has no harm.

--------------------
A* algorithm pseudo-code
{{{code: lang="prolog" linenumbers="True"
OPEN = [S], CLOSED = []
while OPEN.isEmpty()==false:
	n = OPEN.sort(f)[0]
	if goalTest(n)==true:
		return n
	OPEN.remove(n)
	CLOSED.add(n)
	for m of N: /*check only unexplored nodes*/
		if (m in CLOSED)==false:
			if (m in OPEN)==false && (m in CLOSED)==false:
				OPEN.add(m)
				m.parent = n /* set the parent*/
				g(m) = g(n) + d(n, m) /* d is the actual cost from n to m*/
				f(m) = g(m)+h(m)
			else:
				if g(n)+d(m, n) < g(m):
					m.parent = n
					g(m) = g(n) + d(m, n)
					f(m) = g(m) + h(m)
					if  (m in CLOSED)==true:
						propagate_imrovement()
}}}

* How this differs from Dijkstra - The graph is not available before-hand, we are generating it on the fly here.
* In contrast to Dijkstra, CLOSED nodes also need to considered here.
* In contrast to Dijkstra, we don't have to find shortest path to all from S, but only to G.
* B & B is a special case of A*, where h(n) = 0, âˆ€ n
